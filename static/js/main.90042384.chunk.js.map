{"version":3,"sources":["Componnent/ContactForm.js","Componnent/ListContact.js","Componnent/Filtr.js","App.js","index.js"],"names":["ContactForm","onAddContact","useState","name","setName","number","setNumber","reset","onSubmit","evt","preventDefault","type","pattern","title","required","value","onChange","e","currentTarget","ListContact","contacts","onRemoveContact","map","contact","className","onClick","id","console","log","FilterContacts","onChangeFilter","target","App","setContacts","filter","setFilter","useEffect","window","localStorage","setItem","JSON","stringify","normalizeFilter","toLowerCase","getVisibleContacts","includes","task","taskNameNormalized","searchSameName","find","alert","length","shortid","prevState","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAIe,SAASA,EAAT,GAAwC,IAAjBC,EAAgB,EAAhBA,aACpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAeMC,EAAQ,WACZH,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAME,SAba,SAAAC,GACnBA,EAAIC,iBAEJT,EAAa,CAAEE,OAAME,WAErBE,KAQA,UACE,yCAEE,uBACEI,KAAK,OACLR,KAAK,OACLS,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,MAAOZ,EACPa,SA7BiB,SAAAC,GACvBb,EAAQa,EAAEC,cAAcH,aA+BtB,2CAEE,uBACEJ,KAAK,MACLR,KAAK,SACLS,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,MAAOV,EACPW,SAtCmB,SAAAC,GACzBX,EAAUW,EAAEC,cAAcH,aAwCxB,wBAAQJ,KAAK,SAAb,4BCjDN,IAAMQ,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,gBAAb,OAClB,6BACGD,EAASE,KAAI,SAAAC,GAAO,OACnB,+BACGA,EAAQpB,KAAO,IAAMoB,EAAQlB,OAE5B,wBACEmB,UAAU,gBACVb,KAAK,SACLR,KAAK,SACLsB,QAAS,kBAAMJ,EAAgBE,EAAQG,KAJzC,sBAHKH,EAAQG,UAgBvBC,QAAQC,IAAIT,EAAYC,UAYTD,QC/BA,SAASU,EAAT,GAAoD,IAA1Bd,EAAyB,EAAzBA,MAAOe,EAAkB,EAAlBA,eAC9C,OACE,wDAEE,uBACEnB,KAAK,OACLI,MAAOA,EACPC,SAAU,SAAAC,GAAC,OAAIa,EAAeb,EAAEc,OAAOhB,aC+DhCiB,MAjEf,WACE,MAAgC9B,mBAAS,CACvC,CAAEwB,GAAI,OAAQvB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEqB,GAAI,OAAQvB,KAAM,iBAAkBE,OAAQ,aAC9C,CAAEqB,GAAI,OAAQvB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEqB,GAAI,OAAQvB,KAAM,iBAAkBE,OAAQ,eAJhD,mBAAOe,EAAP,KAAiBa,EAAjB,KAMA,EAA4B/B,mBAAS,IAArC,mBAAOgC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAIRC,OAAOC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUrB,MACtD,CAACA,IAEJ,IAuBMsB,EAAkBR,EAAOS,cACzBC,EAAqBxB,EAASc,QAAO,SAAAX,GAAO,OAChDA,EAAQpB,KAAKwC,cAAcE,SAASH,MAOtC,OACE,gCACE,2CACA,cAAC1C,EAAD,CAAaC,aAnCE,SAAA6C,GACjB,IAAMC,EAAqBD,EAAK3C,KAAKwC,cAC/BK,EAAiB5B,EAAS6B,MAC9B,SAAA1B,GAAO,OAAIA,EAAQpB,KAAKwC,gBAAkBI,KAG5C,GAAIC,EACFE,MAAM,GAAD,OAAIJ,EAAK3C,KAAT,iCACA,GAAyB,IAArB2C,EAAK3C,KAAKgD,OACnBD,MAAM,8BACD,CACL,IAAM3B,EAAO,2BACRuB,GADQ,IAEXpB,GAAI0B,QAGNnB,GAAY,SAAAoB,GAAS,4BAAQA,GAAR,CAAmB9B,WAqBxC,0CACA,cAAC,EAAD,CAAQR,MAAOmB,EAAQJ,eAnBN,SAAAI,GACnBC,EAAUD,MAmBPU,GACC,cAAC,EAAD,CACExB,SAAUwB,EACVvB,gBAdc,SAAAiC,GACpBrB,EAAYb,EAASc,QAAO,qBAAGR,KAAgB4B,aChDnDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.90042384.chunk.js","sourcesContent":["import { useState } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default function ContactForm({ onAddContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleNameChange = e => {\n    setName(e.currentTarget.value);\n  };\n  const handleNumberChange = e => {\n    setNumber(e.currentTarget.value);\n  };\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    onAddContact({ name, number });\n\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleNameChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleNumberChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ListContact = ({ contacts, onRemoveContact }) => (\n  <ul>\n    {contacts.map(contact => (\n      <li key={contact.id}>\n        {contact.name + ':' + contact.number}\n        {\n          <button\n            className=\"button_delete\"\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onRemoveContact(contact.id)}\n          >\n            delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\nconsole.log(ListContact.contacts);\n\nListContact.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ListContact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function FilterContacts({ value, onChangeFilter }) {\n  return (\n    <div>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </div>\n  );\n}\n\nFilterContacts.propTypes = {\n  value: PropTypes.string.isRequired,\n  onchangeFilter: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport CssModule from './IndexModule.css';\n\nimport ContactForm from './Componnent/ContactForm';\nimport ContactList from './Componnent/ListContact';\nimport Filter from './Componnent/Filtr';\n\nfunction App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    // const contacts = localStorage.getItem('contacts');\n    // const parsedContacts = JSON.parse(contacts);\n    // setContacts(parsedContacts);\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = task => {\n    const taskNameNormalized = task.name.toLowerCase();\n    const searchSameName = contacts.find(\n      contact => contact.name.toLowerCase() === taskNameNormalized,\n    );\n\n    if (searchSameName) {\n      alert(`${task.name} is already in contacts`);\n    } else if (task.name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      const contact = {\n        ...task,\n        id: shortid(),\n      };\n\n      setContacts(prevState => [...prevState, contact]);\n    }\n  };\n  const changeFilter = filter => {\n    setFilter(filter);\n  };\n\n  const normalizeFilter = filter.toLowerCase();\n  const getVisibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter),\n  );\n\n  const removeContact = contactId => {\n    setContacts(contacts.filter(({ id }) => id !== contactId));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onAddContact={addContact} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChangeFilter={changeFilter} />\n      {getVisibleContacts && (\n        <ContactList\n          contacts={getVisibleContacts}\n          onRemoveContact={removeContact}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}