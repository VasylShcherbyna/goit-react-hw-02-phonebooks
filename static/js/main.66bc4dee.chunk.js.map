{"version":3,"sources":["Componnent/ContactForm.js","Componnent/ListContact.js","Componnent/Filtr.js","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","evt","preventDefault","props","onAddContact","reset","this","onSubmit","type","pattern","title","required","onChange","React","Component","ListContact","contacts","onRemoveContact","map","contact","className","onClick","id","FilterContacts","onChangeFilter","target","App","filter","addContact","task","taskNameNormalized","toLowerCase","searchSameName","find","alert","length","shortid","prevState","changeFilter","getVisibleContacts","includes","removeContact","contactId","localStorage","getItem","parsedContacts","JSON","parse","prevProps","console","log","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66bc4dee.chunk.js","sourcesContent":["import React from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n  handleSubmit = evt => {\n    evt.preventDefault();\n\n    this.props.onAddContact({ ...this.state });\n\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { handleSubmit, handleChange } = this;\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\nexport default ContactForm;\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ListContact = ({ contacts, onRemoveContact }) => (\n  <ul>\n    {contacts.map(contact => (\n      <li key={contact.id}>\n        {contact.name + ':' + contact.number}\n        {\n          <button\n            className=\"button_delete\"\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onRemoveContact(contact.id)}\n          >\n            delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\n\nListContact.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ListContact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function FilterContacts({ value, onChangeFilter }) {\n  return (\n    <div>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </div>\n  );\n}\n\nFilterContacts.propTypes = {\n  value: PropTypes.string.isRequired,\n  onchangeFilter: PropTypes.func,\n};\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport CssModule from './IndexModule.css';\n\nimport ContactForm from './Componnent/ContactForm';\nimport ContactList from './Componnent/ListContact';\nimport Filter from './Componnent/Filtr';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.contacts);\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.getItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = task => {\n    const taskNameNormalized = task.name.toLowerCase();\n    const searchSameName = this.state.contacts.find(\n      contact => contact.name.toLowerCase() === taskNameNormalized,\n    );\n\n    if (searchSameName) {\n      alert(`${task.name} is already in contacts`);\n    } else if (task.name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      const contact = {\n        ...task,\n        id: shortid(),\n      };\n\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, contact],\n      }));\n    }\n  };\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    return contacts.filter(contacts =>\n      contacts.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  removeContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n      };\n    });\n  };\n\n  render() {\n    const { filter } = this.state;\n    const { addContact, changeFilter, removeContact } = this;\n\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChangeFilter={changeFilter} />\n        {visibleContacts && (\n          <ContactList\n            contacts={visibleContacts}\n            onRemoveContact={removeContact}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}