{"version":3,"sources":["Componnent/ContactForm.js","Componnent/ListContact.js","Componnent/Filtr.js","App.js","index.js"],"names":["ContactForm","onAddContact","useState","name","setName","number","setNumber","reset","onSubmit","evt","preventDefault","type","pattern","title","required","value","onChange","e","currentTarget","ListContact","contacts","onRemoveContact","map","contact","className","onClick","id","console","log","FilterContacts","onChangeFilter","target","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","toLowerCase","getVisibleContacts","includes","task","taskNameNormalized","searchSameName","find","alert","length","shortid","prevState","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a79017b.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactForm({ onAddContact }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleNameChange = e => {\r\n    setName(e.currentTarget.value);\r\n  };\r\n  const handleNumberChange = e => {\r\n    setNumber(e.currentTarget.value);\r\n  };\r\n  const handleSubmit = evt => {\r\n    evt.preventDefault();\r\n\r\n    onAddContact({ name, number });\r\n\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleNameChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleNumberChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onAddContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ListContact = ({ contacts, onRemoveContact }) => (\n  <ul>\n    {contacts.map(contact => (\n      <li key={contact.id}>\n        {contact.name + ':' + contact.number}\n        {\n          <button\n            className=\"button_delete\"\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onRemoveContact(contact.id)}\n          >\n            delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\nconsole.log(ListContact.contacts);\n\nListContact.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ListContact;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FilterContacts({ value, onChangeFilter }) {\r\n  return (\r\n    <div>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => onChangeFilter(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilterContacts.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onchangeFilter: PropTypes.func,\r\n};\r\n","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport CssModule from './IndexModule.css';\n\nimport ContactForm from './Componnent/ContactForm';\nimport ContactList from './Componnent/ListContact';\nimport Filter from './Componnent/Filtr';\n\nfunction App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(window.localStorage.getItem('contacts')) ?? [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = task => {\n    const taskNameNormalized = task.name.toLowerCase();\n    const searchSameName = contacts.find(\n      contact => contact.name.toLowerCase() === taskNameNormalized,\n    );\n\n    if (searchSameName) {\n      alert(`${task.name} is already in contacts`);\n    } else if (task.name.length === 0) {\n      alert('Fields must be filled!');\n    } else {\n      const contact = {\n        ...task,\n        id: shortid(),\n      };\n\n      setContacts(prevState => [...prevState, contact]);\n    }\n  };\n  const changeFilter = filter => {\n    setFilter(filter);\n  };\n\n  const normalizeFilter = filter.toLowerCase();\n  const getVisibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n\n  const removeContact = contactId => {\n    setContacts(contacts.filter(({ id }) => id !== contactId));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onAddContact={addContact} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChangeFilter={changeFilter} />\n      {getVisibleContacts && (\n        <ContactList\n          contacts={getVisibleContacts}\n          onRemoveContact={removeContact}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}